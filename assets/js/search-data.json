{
  
    
        "post0": {
            "title": "NBA Injury Report Sports Analytics Project (Part 1)",
            "content": "Introduction . This is a first thing, I&#39;d imagine . Problem Scope . Downloading The Injury Reports . Before we can actually do anything interesting with the injury reports, we need to download them. From Basketball Analytics Legend Ed Kupfer&#39;s tweet, we know the location of at least one report: If somebody wants a project, scrape the data from the NBA injury report PDFs from the last few seasons. Just change the date in the URL. https://t.co/SnKpFXPrRl . &mdash; Ed Kupfer (@EdKupfer) April 23, 2021 . Decoding the Filename Schema From the URL . Luckily, the naming schema of the reports is relatively simple to decode. Our example URL is: . https://ak-static.cms.nba.com/referee/injury/Injury-Report_2021-04-23_01PM.pdf . Looks like there&#39;s 4 parts to the URL: . Some boilerplate: https://ak-static.cms.nba.com/referee/injury/Injury-Report_ | A date: 2021-04-23 | A time: 01PM | The file extension: .pdf | We&#39;re only interested in the middle two (the date and the time), as the boilerplate URL and the file extension won&#39;t change. From googling1 &quot;nba injury report&quot; and clicking on the second link it seems like the times may be 1:30 PM, 5:30 PM and 8:30 PM. . Building a URL List to Download (Finding Gamedays?) . Google helped us sort out what we might use for the time portion of the URL, but the date part is actually a little more complicated than we might like. Since, to the best of my knowledge, there&#39;s no &quot;central&quot; page that has links to each report, we&#39;ll need to know the date for every report we want to download. According to the official NBA annoucement, the dates we&#39;re interested in are actually the day before game days, except on the second days of back-to-backs, in which case presumably the injury report comes out the day of the game. . This all sounds complicated, and if there&#39;s one thing I&#39;ve learned about projects like this it&#39;s that nothing saps enthusiasm like complication and extra effort that doesn&#39;t &quot;feel&quot; like it&#39;s in the service of what we&#39;re trying to accomplish. . So, given what we know, it seems as if we have two options: . Get a copy of the NBA schedule, and try to download reports for days we know there&#39;s a game | Just start downloading [a range of?] dates and see what we get | There&#39;s nothing wrong with taking a stab at option 1 here, but this project is about injury reports, not the NBA schedule, so we&#39;ll start with option 22. . Using datetime.timedelta to Construct A List of Dates . Programmatically dealing with dates can be frustrating, and doing so in Python is no exception. Despite that, it seems relatively obvious that we need to deal with date-like objects here, not just string or numeric representations of the dates themselves. (Trying to &quot;subtract&quot; a day from 01-01-2021 without some internal representation of the calendar seems problematic). . Thinking at a high level, it seems like what we might want to do is build3 a list of dates, starting at, say, today — or some other reasonable choice, like the end of the NBA season — and work backward until...well, it&#39;s not exactly clear how far back we need to go. But the notion still seems reasonable: start at a date and count backward day by day, creating a new date each time. Luckily, Python has exactly the thing we need to do this: the timedelta object. . For our purposes, a timedelta object is simply something that allows us to perform arithmetic on datetime objects. Consider the following: . import datetime # Random_date is a datetime object random_date = datetime.datetime.strptime(&#39;2011-09-18&#39;, &#39;%Y-%m-%d&#39;) # Let&#39;s create a new datetime object by subtracting a timedelta object # Note that we&#39;re using the &quot;days&quot; parameter. Try experimenting with other values! new_date = random_date - datetime.timedelta(days=10) print(f&quot;Ten days before {random_date} is {new_date}&quot;) . Ten days before 2011-09-18 00:00:00 is 2011-09-08 00:00:00 . . Tip: Adding or subtracting datetime and timedelta objects from each other can be tricky. Expand the code below to see examples of what is valid, and what returns an error. Try playing with negative timedelta values! . The 2021 NBA season ended on July 20th, and from manual testing, https://ak-static.cms.nba.com/referee/injury/Injury-Report_2021-07-20_08PM.pdf is a valid link (the next day, unsurprisingly, is not). So let&#39;s start there, and count backward until we reach the day before the start of the season, which would be December 21st, 2020. . season_start = datetime.datetime.strptime(&#39;2020-12-21&#39;, &#39;%Y-%m-%d&#39;) season_end = datetime.datetime.strptime(&#39;2021-07-20&#39;, &#39;%Y-%m-%d&#39;) season_duration = season_end - season_start # season_duraction is a timedelta object print(f&#39;{season_duration=} is of type {type(season_duration)}&#39;) . season_duration=datetime.timedelta(days=211) is of type &lt;class &#39;datetime.timedelta&#39;&gt; . Now, to construct our list of dates is actually a little tricky. Unfortunately, we can&#39;t just &quot;increment&quot; season_start until it reaches season_end (that would be too easy). We basically have to turn our season_duration — which is a timedelta object — into a range, and then we iterate over that, subtracting a day for each value in the range. . To do this, we use the .days attribute of the timedelta object. That gives us an integer representation of the how many days are between the two dates used to create the timedelta in the first place. We then convert this integral number of days back into a timedelta, which we subtract from our season_end variable. Confused? Hopefully the code will help clarify: . season_dates = list() # Convert the timedelta into an integral range, from 0 to the number of days in season_duration (211) for day_number in range(season_duration.days): # Subtract day_number of days from our season endpoint (after converting to a timedelta) gameday = season_end - datetime.timedelta(days=day_number) # Append this new datetime to our list season_dates.append(gameday) print(f&#39;season_dates spans from {season_dates[0]} to {season_dates[-1]} with length {len(season_dates)}&#39;) . season_dates spans from 2021-07-20 00:00:00 to 2020-12-22 00:00:00 with length 211 . Uh oh, we&#39;re off by one, and a day short! Makes sense, since we&#39;re only iterating 211 times, so we lose one of the endpoints. Fixing that, and converting the above to a list comprehension, we get: . season_dates = [season_end - datetime.timedelta(days=day_number) for day_number in range(season_duration.days+1)] print(f&#39;season_dates spans from {season_dates[0]} to {season_dates[-1]} with length {len(season_dates)}&#39;) . season_dates spans from 2021-07-20 00:00:00 to 2020-12-21 00:00:00 with length 212 . def daterange(date1, date2): for n in range(int ((date2 - date1).days)+1): yield date1 + datetime.timedelta(n) . for thing in daterange(season_start, season_end): print(thing) . 2020-12-21 00:00:00 2020-12-22 00:00:00 2020-12-23 00:00:00 2020-12-24 00:00:00 2020-12-25 00:00:00 2020-12-26 00:00:00 2020-12-27 00:00:00 2020-12-28 00:00:00 2020-12-29 00:00:00 2020-12-30 00:00:00 2020-12-31 00:00:00 2021-01-01 00:00:00 2021-01-02 00:00:00 2021-01-03 00:00:00 2021-01-04 00:00:00 2021-01-05 00:00:00 2021-01-06 00:00:00 2021-01-07 00:00:00 2021-01-08 00:00:00 2021-01-09 00:00:00 2021-01-10 00:00:00 2021-01-11 00:00:00 2021-01-12 00:00:00 2021-01-13 00:00:00 2021-01-14 00:00:00 2021-01-15 00:00:00 2021-01-16 00:00:00 2021-01-17 00:00:00 2021-01-18 00:00:00 2021-01-19 00:00:00 2021-01-20 00:00:00 2021-01-21 00:00:00 2021-01-22 00:00:00 2021-01-23 00:00:00 2021-01-24 00:00:00 2021-01-25 00:00:00 2021-01-26 00:00:00 2021-01-27 00:00:00 2021-01-28 00:00:00 2021-01-29 00:00:00 2021-01-30 00:00:00 2021-01-31 00:00:00 2021-02-01 00:00:00 2021-02-02 00:00:00 2021-02-03 00:00:00 2021-02-04 00:00:00 2021-02-05 00:00:00 2021-02-06 00:00:00 2021-02-07 00:00:00 2021-02-08 00:00:00 2021-02-09 00:00:00 2021-02-10 00:00:00 2021-02-11 00:00:00 2021-02-12 00:00:00 2021-02-13 00:00:00 2021-02-14 00:00:00 2021-02-15 00:00:00 2021-02-16 00:00:00 2021-02-17 00:00:00 2021-02-18 00:00:00 2021-02-19 00:00:00 2021-02-20 00:00:00 2021-02-21 00:00:00 2021-02-22 00:00:00 2021-02-23 00:00:00 2021-02-24 00:00:00 2021-02-25 00:00:00 2021-02-26 00:00:00 2021-02-27 00:00:00 2021-02-28 00:00:00 2021-03-01 00:00:00 2021-03-02 00:00:00 2021-03-03 00:00:00 2021-03-04 00:00:00 2021-03-05 00:00:00 2021-03-06 00:00:00 2021-03-07 00:00:00 2021-03-08 00:00:00 2021-03-09 00:00:00 2021-03-10 00:00:00 2021-03-11 00:00:00 2021-03-12 00:00:00 2021-03-13 00:00:00 2021-03-14 00:00:00 2021-03-15 00:00:00 2021-03-16 00:00:00 2021-03-17 00:00:00 2021-03-18 00:00:00 2021-03-19 00:00:00 2021-03-20 00:00:00 2021-03-21 00:00:00 2021-03-22 00:00:00 2021-03-23 00:00:00 2021-03-24 00:00:00 2021-03-25 00:00:00 2021-03-26 00:00:00 2021-03-27 00:00:00 2021-03-28 00:00:00 2021-03-29 00:00:00 2021-03-30 00:00:00 2021-03-31 00:00:00 2021-04-01 00:00:00 2021-04-02 00:00:00 2021-04-03 00:00:00 2021-04-04 00:00:00 2021-04-05 00:00:00 2021-04-06 00:00:00 2021-04-07 00:00:00 2021-04-08 00:00:00 2021-04-09 00:00:00 2021-04-10 00:00:00 2021-04-11 00:00:00 2021-04-12 00:00:00 2021-04-13 00:00:00 2021-04-14 00:00:00 2021-04-15 00:00:00 2021-04-16 00:00:00 2021-04-17 00:00:00 2021-04-18 00:00:00 2021-04-19 00:00:00 2021-04-20 00:00:00 2021-04-21 00:00:00 2021-04-22 00:00:00 2021-04-23 00:00:00 2021-04-24 00:00:00 2021-04-25 00:00:00 2021-04-26 00:00:00 2021-04-27 00:00:00 2021-04-28 00:00:00 2021-04-29 00:00:00 2021-04-30 00:00:00 2021-05-01 00:00:00 2021-05-02 00:00:00 2021-05-03 00:00:00 2021-05-04 00:00:00 2021-05-05 00:00:00 2021-05-06 00:00:00 2021-05-07 00:00:00 2021-05-08 00:00:00 2021-05-09 00:00:00 2021-05-10 00:00:00 2021-05-11 00:00:00 2021-05-12 00:00:00 2021-05-13 00:00:00 2021-05-14 00:00:00 2021-05-15 00:00:00 2021-05-16 00:00:00 2021-05-17 00:00:00 2021-05-18 00:00:00 2021-05-19 00:00:00 2021-05-20 00:00:00 2021-05-21 00:00:00 2021-05-22 00:00:00 2021-05-23 00:00:00 2021-05-24 00:00:00 2021-05-25 00:00:00 2021-05-26 00:00:00 2021-05-27 00:00:00 2021-05-28 00:00:00 2021-05-29 00:00:00 2021-05-30 00:00:00 2021-05-31 00:00:00 2021-06-01 00:00:00 2021-06-02 00:00:00 2021-06-03 00:00:00 2021-06-04 00:00:00 2021-06-05 00:00:00 2021-06-06 00:00:00 2021-06-07 00:00:00 2021-06-08 00:00:00 2021-06-09 00:00:00 2021-06-10 00:00:00 2021-06-11 00:00:00 2021-06-12 00:00:00 2021-06-13 00:00:00 2021-06-14 00:00:00 2021-06-15 00:00:00 2021-06-16 00:00:00 2021-06-17 00:00:00 2021-06-18 00:00:00 2021-06-19 00:00:00 2021-06-20 00:00:00 2021-06-21 00:00:00 2021-06-22 00:00:00 2021-06-23 00:00:00 2021-06-24 00:00:00 2021-06-25 00:00:00 2021-06-26 00:00:00 2021-06-27 00:00:00 2021-06-28 00:00:00 2021-06-29 00:00:00 2021-06-30 00:00:00 2021-07-01 00:00:00 2021-07-02 00:00:00 2021-07-03 00:00:00 2021-07-04 00:00:00 2021-07-05 00:00:00 2021-07-06 00:00:00 2021-07-07 00:00:00 2021-07-08 00:00:00 2021-07-09 00:00:00 2021-07-10 00:00:00 2021-07-11 00:00:00 2021-07-12 00:00:00 2021-07-13 00:00:00 2021-07-14 00:00:00 2021-07-15 00:00:00 2021-07-16 00:00:00 2021-07-17 00:00:00 2021-07-18 00:00:00 2021-07-19 00:00:00 2021-07-20 00:00:00 . season_dates = [season_end - datetime.timedelta(days=gameday) for gameday in range(season_duration.days+1)] . [datetime.datetime(2021, 7, 20, 0, 0), datetime.datetime(2021, 7, 19, 0, 0), datetime.datetime(2021, 7, 18, 0, 0), datetime.datetime(2021, 7, 17, 0, 0), datetime.datetime(2021, 7, 16, 0, 0), datetime.datetime(2021, 7, 15, 0, 0), datetime.datetime(2021, 7, 14, 0, 0), datetime.datetime(2021, 7, 13, 0, 0), datetime.datetime(2021, 7, 12, 0, 0), datetime.datetime(2021, 7, 11, 0, 0), datetime.datetime(2021, 7, 10, 0, 0), datetime.datetime(2021, 7, 9, 0, 0), datetime.datetime(2021, 7, 8, 0, 0), datetime.datetime(2021, 7, 7, 0, 0), datetime.datetime(2021, 7, 6, 0, 0), datetime.datetime(2021, 7, 5, 0, 0), datetime.datetime(2021, 7, 4, 0, 0), datetime.datetime(2021, 7, 3, 0, 0), datetime.datetime(2021, 7, 2, 0, 0), datetime.datetime(2021, 7, 1, 0, 0), datetime.datetime(2021, 6, 30, 0, 0), datetime.datetime(2021, 6, 29, 0, 0), datetime.datetime(2021, 6, 28, 0, 0), datetime.datetime(2021, 6, 27, 0, 0), datetime.datetime(2021, 6, 26, 0, 0), datetime.datetime(2021, 6, 25, 0, 0), datetime.datetime(2021, 6, 24, 0, 0), datetime.datetime(2021, 6, 23, 0, 0), datetime.datetime(2021, 6, 22, 0, 0), datetime.datetime(2021, 6, 21, 0, 0), datetime.datetime(2021, 6, 20, 0, 0), datetime.datetime(2021, 6, 19, 0, 0), datetime.datetime(2021, 6, 18, 0, 0), datetime.datetime(2021, 6, 17, 0, 0), datetime.datetime(2021, 6, 16, 0, 0), datetime.datetime(2021, 6, 15, 0, 0), datetime.datetime(2021, 6, 14, 0, 0), datetime.datetime(2021, 6, 13, 0, 0), datetime.datetime(2021, 6, 12, 0, 0), datetime.datetime(2021, 6, 11, 0, 0), datetime.datetime(2021, 6, 10, 0, 0), datetime.datetime(2021, 6, 9, 0, 0), datetime.datetime(2021, 6, 8, 0, 0), datetime.datetime(2021, 6, 7, 0, 0), datetime.datetime(2021, 6, 6, 0, 0), datetime.datetime(2021, 6, 5, 0, 0), datetime.datetime(2021, 6, 4, 0, 0), datetime.datetime(2021, 6, 3, 0, 0), datetime.datetime(2021, 6, 2, 0, 0), datetime.datetime(2021, 6, 1, 0, 0), datetime.datetime(2021, 5, 31, 0, 0), datetime.datetime(2021, 5, 30, 0, 0), datetime.datetime(2021, 5, 29, 0, 0), datetime.datetime(2021, 5, 28, 0, 0), datetime.datetime(2021, 5, 27, 0, 0), datetime.datetime(2021, 5, 26, 0, 0), datetime.datetime(2021, 5, 25, 0, 0), datetime.datetime(2021, 5, 24, 0, 0), datetime.datetime(2021, 5, 23, 0, 0), datetime.datetime(2021, 5, 22, 0, 0), datetime.datetime(2021, 5, 21, 0, 0), datetime.datetime(2021, 5, 20, 0, 0), datetime.datetime(2021, 5, 19, 0, 0), datetime.datetime(2021, 5, 18, 0, 0), datetime.datetime(2021, 5, 17, 0, 0), datetime.datetime(2021, 5, 16, 0, 0), datetime.datetime(2021, 5, 15, 0, 0), datetime.datetime(2021, 5, 14, 0, 0), datetime.datetime(2021, 5, 13, 0, 0), datetime.datetime(2021, 5, 12, 0, 0), datetime.datetime(2021, 5, 11, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 5, 9, 0, 0), datetime.datetime(2021, 5, 8, 0, 0), datetime.datetime(2021, 5, 7, 0, 0), datetime.datetime(2021, 5, 6, 0, 0), datetime.datetime(2021, 5, 5, 0, 0), datetime.datetime(2021, 5, 4, 0, 0), datetime.datetime(2021, 5, 3, 0, 0), datetime.datetime(2021, 5, 2, 0, 0), datetime.datetime(2021, 5, 1, 0, 0), datetime.datetime(2021, 4, 30, 0, 0), datetime.datetime(2021, 4, 29, 0, 0), datetime.datetime(2021, 4, 28, 0, 0), datetime.datetime(2021, 4, 27, 0, 0), datetime.datetime(2021, 4, 26, 0, 0), datetime.datetime(2021, 4, 25, 0, 0), datetime.datetime(2021, 4, 24, 0, 0), datetime.datetime(2021, 4, 23, 0, 0), datetime.datetime(2021, 4, 22, 0, 0), datetime.datetime(2021, 4, 21, 0, 0), datetime.datetime(2021, 4, 20, 0, 0), datetime.datetime(2021, 4, 19, 0, 0), datetime.datetime(2021, 4, 18, 0, 0), datetime.datetime(2021, 4, 17, 0, 0), datetime.datetime(2021, 4, 16, 0, 0), datetime.datetime(2021, 4, 15, 0, 0), datetime.datetime(2021, 4, 14, 0, 0), datetime.datetime(2021, 4, 13, 0, 0), datetime.datetime(2021, 4, 12, 0, 0), datetime.datetime(2021, 4, 11, 0, 0), datetime.datetime(2021, 4, 10, 0, 0), datetime.datetime(2021, 4, 9, 0, 0), datetime.datetime(2021, 4, 8, 0, 0), datetime.datetime(2021, 4, 7, 0, 0), datetime.datetime(2021, 4, 6, 0, 0), datetime.datetime(2021, 4, 5, 0, 0), datetime.datetime(2021, 4, 4, 0, 0), datetime.datetime(2021, 4, 3, 0, 0), datetime.datetime(2021, 4, 2, 0, 0), datetime.datetime(2021, 4, 1, 0, 0), datetime.datetime(2021, 3, 31, 0, 0), datetime.datetime(2021, 3, 30, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 3, 28, 0, 0), datetime.datetime(2021, 3, 27, 0, 0), datetime.datetime(2021, 3, 26, 0, 0), datetime.datetime(2021, 3, 25, 0, 0), datetime.datetime(2021, 3, 24, 0, 0), datetime.datetime(2021, 3, 23, 0, 0), datetime.datetime(2021, 3, 22, 0, 0), datetime.datetime(2021, 3, 21, 0, 0), datetime.datetime(2021, 3, 20, 0, 0), datetime.datetime(2021, 3, 19, 0, 0), datetime.datetime(2021, 3, 18, 0, 0), datetime.datetime(2021, 3, 17, 0, 0), datetime.datetime(2021, 3, 16, 0, 0), datetime.datetime(2021, 3, 15, 0, 0), datetime.datetime(2021, 3, 14, 0, 0), datetime.datetime(2021, 3, 13, 0, 0), datetime.datetime(2021, 3, 12, 0, 0), datetime.datetime(2021, 3, 11, 0, 0), datetime.datetime(2021, 3, 10, 0, 0), datetime.datetime(2021, 3, 9, 0, 0), datetime.datetime(2021, 3, 8, 0, 0), datetime.datetime(2021, 3, 7, 0, 0), datetime.datetime(2021, 3, 6, 0, 0), datetime.datetime(2021, 3, 5, 0, 0), datetime.datetime(2021, 3, 4, 0, 0), datetime.datetime(2021, 3, 3, 0, 0), datetime.datetime(2021, 3, 2, 0, 0), datetime.datetime(2021, 3, 1, 0, 0), datetime.datetime(2021, 2, 28, 0, 0), datetime.datetime(2021, 2, 27, 0, 0), datetime.datetime(2021, 2, 26, 0, 0), datetime.datetime(2021, 2, 25, 0, 0), datetime.datetime(2021, 2, 24, 0, 0), datetime.datetime(2021, 2, 23, 0, 0), datetime.datetime(2021, 2, 22, 0, 0), datetime.datetime(2021, 2, 21, 0, 0), datetime.datetime(2021, 2, 20, 0, 0), datetime.datetime(2021, 2, 19, 0, 0), datetime.datetime(2021, 2, 18, 0, 0), datetime.datetime(2021, 2, 17, 0, 0), datetime.datetime(2021, 2, 16, 0, 0), datetime.datetime(2021, 2, 15, 0, 0), datetime.datetime(2021, 2, 14, 0, 0), datetime.datetime(2021, 2, 13, 0, 0), datetime.datetime(2021, 2, 12, 0, 0), datetime.datetime(2021, 2, 11, 0, 0), datetime.datetime(2021, 2, 10, 0, 0), datetime.datetime(2021, 2, 9, 0, 0), datetime.datetime(2021, 2, 8, 0, 0), datetime.datetime(2021, 2, 7, 0, 0), datetime.datetime(2021, 2, 6, 0, 0), datetime.datetime(2021, 2, 5, 0, 0), datetime.datetime(2021, 2, 4, 0, 0), datetime.datetime(2021, 2, 3, 0, 0), datetime.datetime(2021, 2, 2, 0, 0), datetime.datetime(2021, 2, 1, 0, 0), datetime.datetime(2021, 1, 31, 0, 0), datetime.datetime(2021, 1, 30, 0, 0), datetime.datetime(2021, 1, 29, 0, 0), datetime.datetime(2021, 1, 28, 0, 0), datetime.datetime(2021, 1, 27, 0, 0), datetime.datetime(2021, 1, 26, 0, 0), datetime.datetime(2021, 1, 25, 0, 0), datetime.datetime(2021, 1, 24, 0, 0), datetime.datetime(2021, 1, 23, 0, 0), datetime.datetime(2021, 1, 22, 0, 0), datetime.datetime(2021, 1, 21, 0, 0), datetime.datetime(2021, 1, 20, 0, 0), datetime.datetime(2021, 1, 19, 0, 0), datetime.datetime(2021, 1, 18, 0, 0), datetime.datetime(2021, 1, 17, 0, 0), datetime.datetime(2021, 1, 16, 0, 0), datetime.datetime(2021, 1, 15, 0, 0), datetime.datetime(2021, 1, 14, 0, 0), datetime.datetime(2021, 1, 13, 0, 0), datetime.datetime(2021, 1, 12, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2021, 1, 10, 0, 0), datetime.datetime(2021, 1, 9, 0, 0), datetime.datetime(2021, 1, 8, 0, 0), datetime.datetime(2021, 1, 7, 0, 0), datetime.datetime(2021, 1, 6, 0, 0), datetime.datetime(2021, 1, 5, 0, 0), datetime.datetime(2021, 1, 4, 0, 0), datetime.datetime(2021, 1, 3, 0, 0), datetime.datetime(2021, 1, 2, 0, 0), datetime.datetime(2021, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 12, 30, 0, 0), datetime.datetime(2020, 12, 29, 0, 0), datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 27, 0, 0), datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 24, 0, 0), datetime.datetime(2020, 12, 23, 0, 0), datetime.datetime(2020, 12, 22, 0, 0), datetime.datetime(2020, 12, 21, 0, 0)] . random_date = datetime.datetime.strptime(&#39;2011-09-18&#39;, &#39;%Y-%m-%d&#39;) another_date = datetime.datetime.strptime(&#39;2021-01-1&#39;, &#39;%Y-%m-%d&#39;) ten_days_hence = datetime.timedelta(days=10) # datetime - datetime = timedelta print(&#39;******: datetime - datetime = timedelta&#39;) print(f&#39;A {type(random_date)} - a {type(another_date)} is a {type(random_date - another_date)}&#39;) print(f&#39;i.e. {random_date} - {another_date} = {random_date - another_date}&#39;) # datetime + datetime = Error! print(&#39;******: datetime + datetime = Error!&#39;) try: print(f&#39;A {type(random_date)} + a {type(another_date)} is a {type(random_date + another_date)}&#39;) except TypeError: print(f&quot;You can&#39;t add {type(random_date)=} and {type(another_date)=}&quot;) # datetime +/- timedelta = datetime print(&#39;******: datetime +/- timedelta = datetime&#39;) print(f&#39;A {type(random_date)} +/- a {type(ten_days_hence)} is a {type(random_date - ten_days_hence)}&#39;) print(f&#39;i.e. {random_date} - {ten_days_hence} = {random_date - ten_days_hence}&#39;) print(f&#39;i.e. {random_date} + {ten_days_hence} = {random_date + ten_days_hence}&#39;) # timedelta + datetime = datetime print(&#39;******: timedelta + datetime = datetime&#39;) print(f&#39;A {type(ten_days_hence)} + a {type(random_date)} is a {type(ten_days_hence + random_date)}&#39;) print(f&#39;i.e. {ten_days_hence} + {random_date} = {ten_days_hence + random_date}&#39;) # timedelta - datetime = Error! print(&#39;******: # timedelta - datetime = Error!&#39;) try: print(f&#39;A {type(ten_days_hence)} - a {type(random_date)} is a {type(ten_days_hence - random_date)}&#39;) except TypeError: print(f&quot;You can&#39;t subtract {type(ten_days_hence)=} - {type(random_date)=}&quot;) new_date = random_date + datetime.timedelta(days=10) # timedelta = datetime +/- datetime other_date = new_date - random_date # datetime = timedelta + datetime yet_another_date = datetime.timedelta(days=-10) + random_date # ERROR = timedelta - datetime # bad_value = datetime.timedelta(days=-10) - random_date . . ******: datetime - datetime = timedelta A &lt;class &#39;datetime.datetime&#39;&gt; - a &lt;class &#39;datetime.datetime&#39;&gt; is a &lt;class &#39;datetime.timedelta&#39;&gt; i.e. 2011-09-18 00:00:00 - 2021-01-01 00:00:00 = -3393 days, 0:00:00 ******: datetime + datetime = Error! You can&#39;t add type(random_date)=&lt;class &#39;datetime.datetime&#39;&gt; and type(another_date)=&lt;class &#39;datetime.datetime&#39;&gt; ******: datetime +/- timedelta = datetime A &lt;class &#39;datetime.datetime&#39;&gt; +/- a &lt;class &#39;datetime.timedelta&#39;&gt; is a &lt;class &#39;datetime.datetime&#39;&gt; i.e. 2011-09-18 00:00:00 - 10 days, 0:00:00 = 2011-09-08 00:00:00 i.e. 2011-09-18 00:00:00 + 10 days, 0:00:00 = 2011-09-28 00:00:00 ******: timedelta + datetime = datetime A &lt;class &#39;datetime.timedelta&#39;&gt; + a &lt;class &#39;datetime.datetime&#39;&gt; is a &lt;class &#39;datetime.datetime&#39;&gt; i.e. 10 days, 0:00:00 + 2011-09-18 00:00:00 = 2011-09-28 00:00:00 ******: # timedelta - datetime = Error! You can&#39;t subtract type(ten_days_hence)=&lt;class &#39;datetime.timedelta&#39;&gt; - type(random_date)=&lt;class &#39;datetime.datetime&#39;&gt; . 1. I&#39;m going to try my best to show the provenance of as much insight as I can here. I had no idea when the injury reports came out, so I googled it. Don&#39;t be ashamed to do likewise if there&#39;s something you need to know!↩ . 2. ...and sincerely apologize to Adam Silver next time we run into him for the extra traffic on the nba.com servers.↩ . 3. Ideally we would generate the list versus building it all at once, but conceptually it&#39;s the same thing↩ . Not quite the second thing . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 10. . And another 11 . 10. This is the footnote.↩ . 11. This is the other footnote. You can even have a link!↩ . 2. I&#39;m going to try my best to show the provenance of as much insight as I can here. I had no idea when the injury reports came out, so I googled it. Don&#39;t be ashamed to do likewise if there&#39;s something you need to know!↩ .",
            "url": "https://jeremyabramson.github.io/blog/sports%20analytics/nba/python/research/projects/injuries/2021/07/25/nba-injuries.html",
            "relUrl": "/sports%20analytics/nba/python/research/projects/injuries/2021/07/25/nba-injuries.html",
            "date": " • Jul 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jeremyabramson.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jeremyabramson.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jeremyabramson.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jeremyabramson.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}